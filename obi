#!/bin/sh

# -----------------------------------------------#
## Obi Version
## ----------------------------------------------#
this_version=2.0

obi_version()
{
	if [[ -z "$version" ]] || [[ "$version" < $this_version ]];
	then
		clear ; echo ; echo "obi: You must first run \033[33mobi update\033[0m in order to continue" ; echo ;
	fi
}

obi_update()
{
	if [[ -z "$version" ]] || [[ "$version" < $this_version ]];
	then
		echo "version='2.0'" | cat - $HOME/.obiconfig > $HOME/.obiconfig.tmp && mv $HOME/.obiconfig.tmp $HOME/.obiconfig
		# Create an array of all of the project folder paths that have a .obi folder in them
		dirs=( "$(find "$localprojectdirectory"* -name ".obi" )" )

		# For each path that contains a .obi folder
		for dir in "${dirs[@]}";
		do
			# Use IFS to break up folder paths by line breaks
			IFS=$'\n'
			lines="$dir"

			for i in $lines; do
				# cd into each directory
				cd $i
				. config
				# Store each of the rsync_dirs array elements in one variable and then delimit them by single quotes
				all_r_dirs=${rsync_dirs[@]:0}
				str_r_dir="${all_r_dirs// /' '}"
				# Create a temp config file with the new structure and copy old variable values over
				echo "#\n# Production ssh settings\n#\nenable_production_ssh='$enable_production_ssh'\nproduction_ssh='$production_ssh'\nproduction_remote_project_root='$production_remote_project_root'\nenable_production_sshmysql='$enable_production_sshmysql'\n\n#\n# Staging ssh settings\n#\nenable_staging_ssh='$enable_staging_ssh'\nstaging_ssh='$staging_ssh'\nstaging_remote_project_root='$staging_remote_project_root'\nenable_staging_sshmysql='$enable_staging_sshmysql'\n\n#\n# S3 settings\n#\nenable_S3='$enable_S3'\npublic_key='$public_key'\nsecret_key='$secret_key'\n\n#\n# RSync settings\n#\nenable_rsync='$enable_rsync'\nrsync_dirs=('""$str_r_dir""')" > config~
				# Cleanup
				mv config "$HOME/.Trash/config"
				mv config~ config
				# If old folder stucture being use update the folder structure
				recreate_folders_structure
			done
			# Unset IFS (good practice)
			unset IFS
		done
	else
		clear ; echo ; echo "obi: Already up to date" ; echo ;
	fi
}


# -----------------------------------------------#
## Obi config
## ----------------------------------------------#


create_obiconfig()
{
	config="$HOME/.obiconfig"

	if [ -f "$config" ]
	then
		. $HOME/.obiconfig
	else
		echo "version='$this_version'\nlocalprojectdirectory='0'\nlocalsettings='enabled'\nlocalhost='localhost'\nlocaluser='root'\nlocalpassword='root'\n\nstagingsettings='disabled'\nstagingdomain='0'\nstaginghost='0'\nstaginguser='0'\nstagingpassword='0'\n\nproductionsettings='disabled'\nproductiondomain='0'\nproductionhost='0'\nproductionuser='0'\nproductionpassword='0'" > $HOME/.obiconfig
	fi
}

configerror()
{
	clear ; echo ; echo "obi: You must first set your local project directory to use that command" ; echo "obi: You can set it by running \033[33mobi config\033[0m" ; echo ;
	exit
}

does_config_exist()
{
	file_exist_check "$HOME/.obiconfig"
	fileexistreturn=$?
	case "$fileexistreturn" in
		9 )
			create_obiconfig
			case "$localprojectdirectory" in
				0 )
					case $ACTION in
						config )
							;;
							*)
								configerror
								exit
							;;
					esac
					;;
			esac
			;;
		10 )
			create_obiconfig
			configerror
			exit
			;;
	esac
}


create_obiconfig
obi_version

# -----------------------------------------------#
## Variables
## ----------------------------------------------#
php=`which php`
mysql=`which mysql`
mysqldump=`which mysqldump`

# Store the type of project to create
ACTION=$1

# Store the name of the new project which will double as the project folder name
case "$2" in
	. ) path=`pwd`
		input=`echo ${path//\// } | awk  ' { print ( $(NF-0) ) }'`;
		case $1 in
			-e|-g|-w|mysql|help|config )
				clear ; echo ;echo "obi: The . subsitution does not work with this command" ; echo ;exit
			;;
			* )
				#  Chech input to see if it contains the word site
				if [[ "$input" =~ .*site ]]
				then
					input_contains=site
				fi
				case "$input_contains" in
					site ) PROJ_FOLDER_NAME=`echo ${path//\// } | awk  ' { print ( $(NF-1) ) }'`
						;;
					* )	PROJ_FOLDER_NAME=`echo ${input//\// } | awk  ' { print ( $(NF-0) ) }'`
					;;
				esac
			;;
		esac
	;;
	* )
		PROJ_FOLDER_NAME="$2";
	;;
esac

case $3 in
	-lts|-ltp|-stl|-stp|-ptl|-pts|-l|-s|-p) PROJ_PATH="$localprojectdirectory"
	;;
	* )
		# If third parameter (project path) is left empty when using -e -w -g,
		if [ -z "$3" ]
		then
			# Then use the default project folder
			PROJ_PATH="$localprojectdirectory"
		else
			# Else store the given directory as the project folder as the third variable
			PROJ_PATH=$3/
		fi
;;
esac


# Store the project path and the project name as a single string
PROJ=$PROJ_PATH$PROJ_FOLDER_NAME

CUT_NAME=`echo $PROJ_FOLDER_NAME | cut -c1-3`

UPPER_CASE_PROJ_FOLDER_NAME=$(tr '[a-z]' '[A-Z]'<<<"${PROJ_FOLDER_NAME:0:1}")



# -----------------------------------------------#
# Functions
## ----------------------------------------------#


#
# Mysql functions
#

mysql_credentials()
{
	server=$1
	wp_config_check

	case "$server" in
		local )
			serversettings="$localsettings"

			case "$serversettings" in
				enabled )
					host="$localhost"
					user="$localuser"
					pass="$localpassword"
					name="$PROJ_FOLDER_NAME"_"$server"_wp
					serversettings="\033[32menabled\033[0m"
				;;
				wp-enabled )
					host=`awk -F\' '/local_db_host/ {print $4}' "$wpconfiglocation"`
					user=`awk -F\' '/local_db_user/ {print $4}' "$wpconfiglocation"`
					pass=`awk -F\' '/local_db_password/ {print $4}' "$wpconfiglocation"`
					name=`awk -F\' '/local_db_name/ {print $4}' "$wpconfiglocation"`
					serversettings="\033[32mwp-enabled\033[0m"
				;;
				* )
					serversettings="\033[31mdisabled\033[0m"
					echo ; echo "obi: Your \033[36m$server\033[0m server settings are set to $serversettings. To change this run: \033[33mobi config\033[0m" ; echo ; exit
				;;
			esac
		;;
		staging )
			serversettings="$stagingsettings"
			mysqlssh="$enable_staging_sshmysql"
			myssh="$staging_ssh"

			case $serversettings in
				enabled )
					host="$staginghost"
					user="$staginguser"
					pass="$stagingpassword"
					name="$PROJ_FOLDER_NAME"_"$server"_wp
					serversettings="\033[32menabled\033[0m"
					;;
				wp-enabled )
					host=`awk -F\' '/staging_db_host/ {print $4}' "$wpconfiglocation"`
					user=`awk -F\' '/staging_db_user/ {print $4}' "$wpconfiglocation"`
					pass=`awk -F\' '/staging_db_password/ {print $4}' "$wpconfiglocation"`
					name=`awk -F\' '/staging_db_name/ {print $4}' "$wpconfiglocation"`
					serversettings="\033[32mwp-enabled\033[0m"
				;;
				* )
		 			# Setup local database values in wp-config.php
					serversettings="\033[31mdisabled\033[0m"
					echo ; echo "obi: Your \033[36m$server\033[0m server settings are set to $serversettings. To change this run: \033[33mobi config\033[0m" ; echo ; exit
				;;
			esac
		;;
		production )
			serversettings="$productionsettings"
			mysqlssh="$enable_production_sshmysql"
			myssh="$production_ssh"

			case "$serversettings" in
				enabled )
					host="$productionhost"
					user="$productionuser"
					pass="$productionpassword"
					name="$PROJ_FOLDER_NAME"_"$server"_wp
					serversettings="\033[32menabled\033[0m"
				;;
				wp-enabled )
					host=`awk -F\' '/production_db_host/ {print $4}' "$wpconfiglocation"`
					user=`awk -F\' '/production_db_user/ {print $4}' "$wpconfiglocation"`
					pass=`awk -F\' '/production_db_password/ {print $4}' "$wpconfiglocation"`
					name=`awk -F\' '/production_db_name/ {print $4}' "$wpconfiglocation"`
					serversettings="\033[32mwp-enabled\033[0m"
				;;
				* )
					# Setup local database values in wp-config.php
					serversettings="\033[31mdisabled\033[0m"
					echo ; echo "obi: Your \033[36m$server\033[0m server settings are set to $serversettings. To change this run: \033[33mobi config\033[0m" ; echo ; exit
				;;
			esac
	;;
	esac
	echo ; echo "obi: Your \033[36m$server\033[0m server settings are set to $serversettings. To change this run: \033[33mobi config\033[0m" ; echo
}

mysql_timestamp()
{
	# Mysql variables
	THE_DATE="$(date +"%Y-%m-%d-%H-%M")"
}

mysql_dump()
{
	database=$1

	mysql_timestamp

	cd "$PROJ"

	if [ ! -d "_resources/dumps/local" ] || [ ! -d "_resources/dumps/staging" ] || [ ! -d "_resources/dumps/production" ] || [ ! -d "_resources/dumps/temp" ]
	then
		create_project_config
	fi

	wp_config_check

	# Looks for database username, database password and database name in the wp-config file
	mysql_credentials $database

	if [ "$mysqlssh" == "1" ] && [ $database != "local" ]
	then
		mysql_special_characters=('*' '?' '[' '<' '>' '&' ';' '!' '|' '$' '(' ')')

		for mysql_special_characters in "${mysql_special_characters[@]}"
		do
			if [[ $pass =~ "$mysql_special_characters" ]];
			then
				pass=${pass//"$mysql_special_characters"/\\"$mysql_special_characters"}
			fi
		done
		ssh -C $myssh mysqldump --net_buffer_length=75000 --verbose -u"$user" -p"$pass" "$name" > "_resources/dumps/$database/$THE_DATE-$database.sql"

	else
		$mysqldump --net_buffer_length=75000 --verbose -h"$host" -u"$user" -p"$pass" "$name" > "_resources/dumps/$database/$THE_DATE-$database.sql"
	fi
}

mysql_import()
{
	database=$1
	from=$2

	mysql_timestamp

	cd "$PROJ"

	if [ ! -d "_resources/dumps/local" ] || [ ! -d "_resources/dumps/staging" ] || [ ! -d "_resources/dumps/production" ] || [ ! -d "_resources/dumps/temp" ]
	then
		create_project_config
	fi

	wp_config_check

	# Looks for database username, database password and database name in the wp-config file
	mysql_credentials $database

	mysql_special_characters=('*' '?' '[' '<' '>' '&' ';' '!' '|' '$' '(' ')')

	if [ "$mysqlssh" == "1" ] && [ $database != "local" ]
	then
		for mysql_special_characters in "${mysql_special_characters[@]}"
		do
			if [[ $pass =~ "$mysql_special_characters" ]];
			then
				pass=${pass//"$mysql_special_characters"/\\"$mysql_special_characters"}
			fi
		done
		ssh -C $myssh mysql -u"$user" -p"$pass" "$name" < "$from"

	elif [ "$mysqlssh" == "0" ] || [ $database == "local" ]
	then
		$mysql -h"$host" -u"$user" -p"$pass" "$name" < "$from"
	fi
}

mysql_sed_import()
{
	dump=$1
	import=$2
	find=$3
	replace=$4

	mysql_timestamp

	cd "$PROJ/_resources/dumps/$dump/"

	# Get the last modified file
	last_modified_output=`find . -type f -exec stat -f "%m %N" {} \; | sort -n | tail -1`
	last_modified_file="${last_modified_output/[0-9]* \.\//}"

	# Location fo the last modified file
	temp_location="$PROJ/_resources/dumps/$dump/$last_modified_file"
	mysql_dump $import
	find_and_replace_wp_url $find $replace $dump $last_modified_file
	mysql_import $dump "$temp_location"
}

mysql_sync()
{
	dump=$1
	import=$2
	find=$3
	replace=$4

	mysql_timestamp

	cd "$PROJ""/_resources/dumps/temp/"

	# Get the last modified file
	last_modified_output=`find . -type f -exec stat -f "%m %N" {} \; | sort -n | tail -1`
	last_modified_file="${last_modified_output/[0-9]* \.\//}"


	mysql_dump $import
	mysql_dump $dump
	find_and_replace_wp_url $find $replace $dump "$last_modified_file"

	recently_modified_output=`find . -type f -exec stat -f "%m %N" {} \; | sort -n | tail -1`
	recently_modified_file="${last_modified_output/[0-9]* \.\//}"
	temp_location="_resources/dumps/temp/$recently_modified_file"
	mysql_import $import "$temp_location"
}

#
# Find and replace functions
#

find_and_replace_wp_url()
{
	find_url=$1
	replace_url=$2
	folder=$3
	# temp_file=$4

	if [ ! -d "_resources/dumps/local" ] || [ ! -d "_resources/dumps/staging" ] || [ ! -d "_resources/dumps/production" ] || [ ! -d "_resources/dumps/temp" ]
	then
	mkdir -p _resources/dumps/{local,production,staging,temp}
	fi

	cd "$PROJ/_resources/dumps/$dump/"

	# Get the last modified file
	last_modified_output=`find . -type f -exec stat -f "%m %N" {} \; | sort -n | tail -1`
	last_modified_file="${last_modified_output/[0-9]* \.\//}"

	cd "$PROJ"

	cp "_resources/dumps/$folder/$last_modified_file" "_resources/dumps/temp/$last_modified_file"


	wp_config_check

	find=`awk -F'"' -v  find="$find_url" '$0 ~ find {print $2}' "$wpconfiglocation" | awk -F: '{print $2}' | cut -c 3-`
	replace=`awk -F'"' -v  replace="$replace_url" '$0 ~ replace {print $2}' "$wpconfiglocation" | awk -F: '{print $2}' | cut -c 3-`

	echo ; echo "obi: Replacing \033[31m$find\033[0m with \033[32m$replace\033[0m"
	sed -i '' -e "s,$find,$replace,g" "$PROJ/_resources/dumps/temp/$last_modified_file"
}

#
# Wp_config functions
#

wp_config_check()
{
	wpconfiglocation="$PROJ_FOLDER_NAME""-site/wp-config.php"
	file_exist_check "$PROJ_FOLDER_NAME""-site/wp-config.php"
	ret10=$?

	if [ "$ret10" == "10" ]
	then
		wpconfiglocation="wp-config.php"
		file_exist_check "wp-config.php"
		ret10=$?

		if [ "$ret10" == "10" ]
		then
			clear
			echo
			echo "obi: The file [ $file ] does not exist"
			echo
			exit 0
		fi
	fi
}


wp_config_evironment()
{
	server=$1

	host="$localhost" ; user="$localuser" ; pass="$localpassword" ; name="$PROJ_FOLDER_NAME"_"$server"_wp
	name="define('DB_NAME', '$name'); // local_db_name"
	user="define('DB_USER', '$user'); // local_db_user"
	pass="define('DB_PASSWORD', '$pass'); // local_db_password"
	host="define('DB_HOST', '$host'); // local_db_host"

	sed -i '' -e  "s|.*local_db_name.*|        $name|" -e "s|.*local_db_user.*|        $user|" -e "s|.*local_db_password.*|        ${pass}|" -e "s|.*local_db_host.*|        $host|" wp-config.php
}

add_salts()
{
	perl -i -pe '
		BEGIN {
		$keysalts = qx(curl -sS https://api.wordpress.org/secret-key/1.1/salt)
		}
		s/\/\/ Insert_Salts_Below/$keysalts/g
	' wp-config.php
}


empty_string_check()
{
	string=$1

	if  [ -z "$string" ]
	then
		return 6
	fi
}

#
# Directory functions
#

# Check to see if the directory given is writable to not overwrite it
project_exist_check()
{
	project=$1

	if [  -d "$project" -a -w "$project" ]
	then
		clear
		echo
		echo "obi: The desired project folder name you specified already exist"
		echo
		exit 0
	fi
}

# Check to see if the directory given is writable to not overwrite it
directory_exist_check()
{
	writable="$1"

	if [ ! -d "$writable" ]
	then
		return 5
	fi
}
file_exist_check ()
{
	file=$1

	if [ ! -f "$file" ]
	then
		return 10
	else
		return 9
	fi
}

create_directories()
{
	does_config_exist
	empty_string_check "$PROJ_FOLDER_NAME"
	strcheckret=$?
	project_exist_check "$PROJ"
	dircheckret=$?
	check_returns
	clear
	cd "$PROJ_PATH"
	mkdir $PROJ_FOLDER_NAME
	cd $PROJ_FOLDER_NAME
	mkdir -p _resources/{assets/{ai,architecture,content,emails,estimates,fonts,gif,jpg,pdf,png,psd},dumps/{local,production,staging,temp}} .obi
	echo "#\n# Production ssh settings\n#\nenable_production_ssh='0'\nproduction_ssh='0'\nproduction_remote_project_root='0'\nenable_production_sshmysql='0'\n\n#\n# Staging ssh settings\n#\nenable_staging_ssh='0'\nstaging_ssh='0'\nstaging_remote_project_root='0'\nenable_staging_sshmysql='0'\n\n#\n# S3 settings\n#\nenable_S3='0'\npublic_key='0'\nsecret_key='0'\n\n#\n# RSync settings\n#\nenable_rsync='0'\nrsync_dirs=('/change/this/to/first/sync/directory/' '/change/this/to/second/sync/directory/or/remove/entirely/')" > .obi/config
	echo ".git\n.gitignore\n.htaccess\nsftp-config.json\n.DS_Store\n_resources\n.obi" > .obiignore
}
recreate_folders_structure()
{
	if [[ -d $PROJ_FOLDER_NAME-site ]]
	then
		mv $PROJ_FOLDER_NAME-site/* . ; cp $PROJ_FOLDER_NAME-site ~/.Trash ; rm -rf $PROJ_FOLDER_NAME-site ;
	fi

	if [[ -d _resources ]]
	then
		break
	else
		mkdir -p _resources/{assets/{ai,architecture,content,emails,estimates,fonts,gif,jpg,pdf,png,psd},dumps/{local,production,staging,temp}} .obi
	fi
	if [[ -d architecture ]];
	then
		rsync -aru architecture/estimates/ _resources/assets/estimates/ ; cp architecture/estimates ~/.Trash  ; rm -rf architecture/estimates ; rsync -aru architecture/ _resources/assets/architecture/ ; cp architecture ~/.Trash ; rm -rf architecture ;
	fi

	if [[ -d assets ]];
	then
		mv assets/images/* assets/ ; cp assets/images ~/.Trash ; rm -rf assets/images ; rsync -aru assets/ _resources/assets/ ; cp assets ~/.Trash ; rm -rf assets ;
	fi

	if [[ -d emails ]];
	then
		rsync -aru emails/ _resources/assets/emails/ ; cp emails ~/.Trash ; rm -rf emails ;
	fi

	if [[ -d dumps ]];
	then
		rsync -aru dumps/ _resources/dumps/ ; cp dumps ~/.Trash ; rm -rf dumps ;
	fi

	if [[ -f .obi/config ]]
	then
		break
	else
		echo "#\n# Production ssh settings\n#\nenable_production_ssh='0'\nproduction_ssh='0'\nproduction_remote_project_root='0'\nenable_production_sshmysql='0'\n\n#\n# Staging ssh settings\n#\nenable_staging_ssh='0'\nstaging_ssh='0'\nstaging_remote_project_root='0'\nenable_staging_sshmysql='0'\n\n#\n# S3 settings\n#\nenable_S3='0'\npublic_key='0'\nsecret_key='0'\n\n#\n# RSync settings\n#\nenable_rsync='0'\nrsync_dirs=('/change/this/to/first/sync/directory/' '/change/this/to/second/sync/directory/or/remove/entirely/')" > .obi/config
	fi

	if [[ -f .obiignore ]]
	then
		break
	else
		echo ".git\n.gitignore\n.htaccess\nsftp-config.json\n.DS_Store\n_resources\n.obi" > .obiignore
	fi
}

obi_init()
{
	empty_string_check "$PROJ_FOLDER_NAME"
	strcheckret=$?
	directory_exist_check "$PROJ"
	dircheckret=$?
	check_returns
	clear
	cd "$PROJ_PATH"
	cd $PROJ_FOLDER_NAME

	recreate_folders_structure
}

check_returns()
{
	case "$strcheckret" in
		6 ) clear ; echo ; echo "obi: \033[33m Your input was empty please try again\033[0m" ; echo ;
			exit
		;;
	esac

	case "$dircheckret" in
		5 ) clear ; echo ; echo "obi: The project \033[33m$PROJ\033[0m" entered does not exist ; echo ;
			exit
	;;
	esac
}

set_project_dir()
{
	MSG="\033[36m Please enter your desired project working directory without the trailing slash or \n     simply drag and drop the desired folder into this window and press ENTER"

	clear

	main_menu

	read DIRECTORY

	empty_string_check "$DIRECTORY"
	ret6=$?
	directory_exist_check "$DIRECTORY"
	ret5=$?

	if [ "$ret6" == "6" ] && [ "$ret5" != "5" ]
	then
		MSG="\033[31m Your input was empty please try again"
	elif [ "$ret6" != "6" ] && [ "$ret5" == "5" ]
	then
		MSG="\033[31m The directory you entered is not writable or does not exist"
	elif [ "$ret6" == "6" ] && [ "$ret5" == "5" ]
	then
		MSG="\033[31m Your input was empty or the directory does not exist"
	else
		sed -i '' "1s,localprojectdirectory=.*,localprojectdirectory='$DIRECTORY/'," $HOME/.obiconfig
		MSG="\033[32m Your project working directory has been set to \n     $DIRECTORY/"
	fi ;

}

#
# Server settings functions
#

set_environment()
{
	environment=$1
	environmentvalue=$2
	linenumber=$3
	MSG="\033[36m Please enter your $environment database $environmentvalue"
	clear
	main_menu
	read environmentanswer
	empty_string_check "$environmentanswer"
	if [ "$ret6" == "6" ]
	then
		MSG="\033[33m Your input was empty please try again"
	else
		sed -i '' "${linenumber}s,$environment$environmentvalue=.*,$environment$environmentvalue='$environmentanswer'," $HOME/.obiconfig
		MSG="\033[32m Your $environment database host has been set to \n\t $environmentanswer"
	fi ;

}

server_toggle_settings()
{
	switch=$1

	case "$switch" in
		enabled ) return 1
		;;
		wp-enabled ) return 2
		;;
		* ) return 0
		;;
	esac

}

get_server_settings()
{
	server_toggle_settings "$localsettings"
	localsettingreturn=$?

	case "$localsettingreturn" in
		0 ) localsettingsare="\033[31mdisabled\033[0m"
		;;
		1 ) localsettingsare="\033[32menabled\033[0m"
		;;
		2 ) localsettingsare="\033[32mwp-enabled\033[0m"
		;;
	esac

	server_toggle_settings "$stagingsettings"
	stagesettingreturn=$?

	case "$stagesettingreturn" in
		0 ) stagingsettingsare="\033[31mdisabled\033[0m"
		;;
		1 ) stagingsettingsare="\033[32menabled\033[0m"
		;;
		2 ) stagingsettingsare="\033[32mwp-enabled\033[0m"
		;;
	esac

	server_toggle_settings "$productionsettings"
	prodsettingreturn=$?

	case "$prodsettingreturn" in
		0 ) prodsettingsare="\033[31mdisabled\033[0m"
		;;
		1 ) prodsettingsare="\033[32menabled\033[0m"
		;;
		2 ) prodsettingsare="\033[32mwp-enabled\033[0m"
		;;
	esac
}

toggle_environment_settings()
{

	environment=$1
	environmentvalue=$2
	linenumber=$3

	setting="$environment""settings"

	case "$environmentvalue" in
		enabled ) switchsettings="wp-enabled"
		;;
		wp-enabled ) switchsettings="disabled"
		;;
		disabled ) switchsettings="enabled"
		;;
		* ) switchsettings="disabled"
		;;
	esac

	sed -i '' "${linenumber}s,$setting=.*,$setting='$switchsettings'," $HOME/.obiconfig
	MSG="\033[32m Your $environment server settings has been set to \n\t $switchsettings"

}
create_project_config()
{
	project_config="$PROJ/.obi/config"

	if [ -f "$project_config" ]
	then
		. "$PROJ/.obi/config"
	else
		cd "$PROJ"
		mkdir -p _resources/{assets/{ai,architecture,content,emails,estimates,fonts,gif,jpg,pdf,png,psd},dumps/{local,production,staging,temp}} .obi
		echo "#\n# Production ssh settings\n#\nenable_production_ssh='0'\nproduction_ssh='0'\nproduction_remote_project_root='0'\nenable_production_sshmysql='0'\n\n#\n# Staging ssh settings\n#\nenable_staging_ssh='0'\nstaging_ssh='0'\nstaging_remote_project_root='0'\nenable_staging_sshmysql='0'\n\n#\n# S3 settings\n#\nenable_S3='0'\npublic_key='0'\nsecret_key='0'\n\n#\n# RSync settings\n#\nenable_rsync='0'\nrsync_dirs=('/change/this/to/first/sync/directory/' '/change/this/to/second/sync/directory/or/remove/entirely/')" > .obi/config
		echo ".git\n.gitignore\n.htaccess\nsftp-config.json\n.DS_Store\n_resources\n.obi" > .obiignore
		. "$PROJ/.obi/config"
	fi
}

project_configerror()
{
	clear ; echo ; echo "obi: You must first set your ssh access" ; echo "obi: You can set it by running \033[33mobi onfig\033[0m" ; echo ;
	exit
}
does_project_config_exist()
{
	ssh=$1
	file_exist_check "$PROJ/.obi/config"
	fileexistreturn=$?
	case "$fileexistreturn" in
		9 )
			create_project_config
			case "$ssh" in
				0 )
				project_configerror
				exit
				;;
			esac
			;;
		10 )
			create_project_config
			project_configerror
			exit
			;;
	esac
}

# -----------------------------------------------#
## S3
## ----------------------------------------------#
zip_to_s3()
{
	if [ "$enable_S3" == "1" ];
	then
		cd "$PROJ";
		mysql_timestamp
		file_count=`ls -1 _resources/dumps/* | wc -l`
		old_files=`find _resources/dumps/* -mtime +7`

		if [ $file_count -gt 30 ] && [ ! -z "$old_files" ];
		then
			find _resources/dumps/* -type f -name ".DS_Store" -exec rm -f {} \;
			# Find files that are more than 7 days old and gzip then
			find _resources/dumps/* -mtime +7 | xargs tar -s /dumps/$THE_DATE-$PROJ_FOLDER_NAME/ -czvPf $THE_DATE-$PROJ_FOLDER_NAME.tar.gz;
			# Send the to s3
			$php -f ~/obi/libs/s3/interface.php $public_key $secret_key  $THE_DATE-$PROJ_FOLDER_NAME.tar.gz;
			files_set_to_s3=`find _resources/dumps/* -mtime +7`
			mv $files_set_to_s3 ~/.Trash
			mv $THE_DATE-$PROJ_FOLDER_NAME.tar.gz ~/.Trash
		fi
	else
		clear; echo; echo "obi: In order to backup to s3 it must first be enabled for this project by editing the \033[33m.obi/config\033[0m file in your project directory"; echo;
		sleep 5
	fi
}

# -----------------------------------------------#
## Rsync Directories
## ----------------------------------------------#

rsync_dir()
{
	ORIGIN=$1
	DESTINATION=$2
	empty_string_check $4
	strcheckret=$?
	if [ "$enable_rsync" == "1" ];
	then
		case "$strcheckret" in
			6 )
				for rsync_dirs in "${rsync_dirs[@]}"
				do
					rsync -rvuz --exclude-from="$PROJ/.obiignore" "$ORIGIN$rsync_dirs" "$DESTINATION$rsync_dirs"
				done
			;;
			* )
				rsync -rvuz --exclude-from="$PROJ/.obiignore" "$ORIGIN" "$DESTINATION"
			;;
		esac
	else
	clear; echo; echo "obi: In order to rsync directories it must first be enabled this for this project by editing the \033[33m.obi/config\033[0m file in your project directory"; echo;
	exit
	fi
}
# -----------------------------------------------#
## Help
## ----------------------------------------------#

help() {
cat<<EOF
Usage: obi [argument]
   or: obi [argument] [project_name | . ] [environment(s)]

Arguments:

   config: configure obi
   help: prints usage to the terminal
   mysql: login local mysql database

   -e: Create an empty working directory
   -g: Create a git repository working directory
   -w: Create a wordpress enabled git repository working directory
   -b: Backup mysql database.
   -r: rsync remote directories to and from local

Project name: Name of the folder that contains your project.

Environments:

   -l: local
   -s: staging
   -p: production
   -lts: local to staging
   -ltp: local to production
   -stl: staging to local
   -stp: staging to production
   -ptl: production to local
   -pts: production to staging

EOF
}

# -----------------------------------------------#
## Menu System
## ----------------------------------------------#

main_menu()
{

	# Get the server settings
	get_server_settings

	# Menu Variables
	logo="\033[36m Obi"

	aprompt="1. Change project working directory"
	bprompt="2. Toggle local server settings. $localsettingsare"
	cprompt="3. Change local database host currently set to \033[33m$localhost\033[0m"
	dprompt="4. Change local database user currently set to \033[33m$localuser\033[0m"
	eprompt="5. Change local database password currently set to \033[33m${localpassword//[a-z]/*}\033[0m"
	fprompt="6. Toggle staging server settings. $stagingsettingsare"
	gprompt="7. Change staging database domain currently set to \033[33m$stagingdomain\033[0m"
	hprompt="8. Change staging host currently set to \033[33m$staginghost\033[0m"
	iprompt="9. Change staging database user currently set to \033[33m$staginguser\033[0m"
	jprompt="10. Change staging database password currently set to \033[33m${stagingpassword//[a-z/*}\033[0m"
	kprompt="11. Toggle production server settings. $prodsettingsare"
	lprompt="12. Change production database domain currently set to \033[33m$productiondomain\033[0m"
	mprompt="13. Change production database host currently set to \033[33m$productionhost\033[0m"
	nprompt="14. Change production database user currently set to \033[33m$productionuser\033[0m"
	oprompt="15. Change production database password currently set to \033[33m${productionpassword//[a-z]/*}\033[0m"


	# Menu Output
	clear
	echo "\t\t     `date`"
	echo
	echo "\t\t\t\t $logo"
	echo
	echo "\t\033[36m A Jedi's Workflow designed for the 21rst century"
	echo "\033[0m"
	echo "\t" "\033[4;37mLocal Enviornment \033[0m"
	echo
	echo "\t""$aprompt"
	echo
	echo "\t""$bprompt"
	echo "\t""$cprompt"
	echo "\t""$dprompt"
	echo "\t""$eprompt"
	echo
	echo "\t" "\033[4;37mStaging Enviornment \033[0m"
	echo
	echo "\t""$fprompt"
	echo "\t""$gprompt"
	echo "\t""$hprompt"
	echo "\t""$iprompt"
	echo "\t""$jprompt"
	echo
	echo "\t" "\033[4;37mProduction Enviornment \033[0m"
	echo
	echo "\t""$kprompt"
	echo "\t""$lprompt"
	echo "\t""$mprompt"
	echo "\t""$nprompt"
	echo "\t""$oprompt"
	echo
	echo "\tx. Exit and return back to the terminal"
	echo
	echo
	echo "obi: $MSG"
	echo "\033[0m"
	echo "Select by pressing the number and then ENTER" ;
}

MSG="Your project working directory is currently set to:\n     \033[32m$localprojectdirectory\033[0m"

# Menu Choices
achoice() {	set_project_dir ; }
bchoice() { toggle_environment_settings local "$localsettings" 2 ; }
cchoice() { set_environment local host 3 ; }
dchoice() { set_environment local user 4 ;}
echoice() { set_environment local password 5 ; }
fchoice() { toggle_environment_settings staging "$stagingsettings" 7 ; }
gchoice() { set_environment staging domain 8 ; }
hchoice() { set_environment staging host 9 ; }
ichoice() { set_environment staging user 10 ; }
jchoice() { set_environment staging password 11 ; }
kchoice() { toggle_environment_settings production "$productionsettings" 13 ; }
lchoice() { set_environment production domain 14 ; }
mchoice() { set_environment production host 15 ; }
nchoice() { set_environment production user 16 ; }
ochoice() { set_environment production password 17 ; }

invalidchoice () { MSG="\033[33m Invalid Selection ... Please Try Again" ; }


# -----------------------------------------------#
## Main Logic
## ----------------------------------------------#

case $ACTION in
	config )
		while true
		do
			create_obiconfig

			# Call the main_menu function
			main_menu

			# Clear out the MSG variable
			MSG=

			#Read the users input
			read answer

			# Call the coresponding function based on the user input
			#if the user input is not one of the available choices then call
			#the invalidchoice function
			case $answer
			in
				1 ) achoice ;;
				2 ) bchoice ;;
				3 ) cchoice ;;
				4 ) dchoice ;;
				5 ) echoice ;;
				6 ) fchoice ;;
				7 ) gchoice ;;
				8 ) hchoice ;;
				9 ) ichoice ;;
				10 ) jchoice ;;
				11 ) kchoice ;;
				12 ) lchoice ;;
				13 ) mchoice ;;
				14 ) nchoice ;;
				15 ) ochoice ;;
				x|X ) clear ; break ;;
				*) invalidchoice ;;
			esac

		done
	;;
	-e )
		# Create the folder structure
		create_directories

		# List directory contents and their location
		ls -laO
		echo ; echo "obi: Your project is located at" `pwd` ; echo
	;;
	-g )
		# Create the folder structure
		create_directories

		# Setup git
		git init
		echo ".DS_Store\n.sass-cache/\n_resources/\n.obi" > .gitignore

		git add .
		git commit -am "initial commit"

		# List directory contents and their location
		ls -laO
		echo ; echo "obi: Your project is located at" `pwd` ; echo
	;;
	-w )
		# Create the folder structure
		create_directories

		# Setup git
		git init

		# Get latest version of wordpress
		curl -OL http://wordpress.org/latest.zip
		tar --strip-components=1 -zxvf latest.zip
		rm latest.zip

		# Clean up stock wordpress themes/plugins
		rm -Rf wp-content/themes/twentyeleven/ ; rm -Rf wp-content/themes/twentytwelve/ ; rm -Rf wp-content/plugins/akismet/ ; rm wp-content/plugins/hello.php ; rm wp-config-sample.php ;

		# Get latest version of klas starter theme
		git clone https://github.com/micalexander/klas.git wp-content/themes/$PROJ_FOLDER_NAME
		rm -Rf wp-content/themes/$PROJ_FOLDER_NAME/.git ; rm wp-content/themes/$PROJ_FOLDER_NAME/.gitignore ;

		# Move the wp-config and the .htaccess file to the site root
		mv wp-content/themes/$PROJ_FOLDER_NAME/.htaccess . ; mv wp-content/themes/$PROJ_FOLDER_NAME/wp-config.php .

		# Move site specific plugin to the plugins folder
		mv wp-content/themes/$PROJ_FOLDER_NAME/klas-specific-plugin wp-content/plugins/$PROJ_FOLDER_NAME-specific-plugin
		mv wp-content/plugins/$PROJ_FOLDER_NAME-specific-plugin/klas-plugin.php wp-content/plugins/$PROJ_FOLDER_NAME-specific-plugin/$PROJ_FOLDER_NAME-plugin.php

		# rename wp login logo to the project name
		mv wp-content/themes/$PROJ_FOLDER_NAME/img/wp-login-logo-klas.png wp-content/themes/$PROJ_FOLDER_NAME/img/wp-login-logo-$PROJ_FOLDER_NAME.png

		# Find and replace the klas name with the project name
		sed -i '' "s,klas,${UPPER_CASE_PROJ_FOLDER_NAME}${PROJ_FOLDER_NAME:1},g" wp-content/plugins/$PROJ_FOLDER_NAME-specific-plugin/$PROJ_FOLDER_NAME-plugin.php
		sed -i '' "s,klas,${PROJ_FOLDER_NAME},g" wp-content/themes/$PROJ_FOLDER_NAME/functions.php
		sed -i '' "s,themes/klas,themes/${PROJ_FOLDER_NAME},g" wp-content/themes/$PROJ_FOLDER_NAME/sass/ie.scss

		# Load the local database credentials
		wp_config_evironment local

		# Replace escape the dot in the staging domain name
		stagingdomain="${stagingdomain//\./\\\.}"

		# Add the necessary variables to the wp-config
		staging_tld="} elseif (preg_match('/$stagingdomain/', \$_SERVER['HTTP_HOST'])) { // staging_server_domain"
		sed -i '' -e  "s|.*staging_server_domain.*|$staging_tld|" wp-config.php
		grep -rl wp_ wp-config.php | xargs sed -i '' "s/wp_/${CUT_NAME}_/"
		grep -rl \".dev\" wp-config.php | xargs sed -i '' "s/\".dev\"/\"http:\/\/${PROJ_FOLDER_NAME}.dev\"/"
		sed -i '' "s/klas/${PROJ_FOLDER_NAME}/" wp-config.php

		# add wp salts
		add_salts

		# Build project's .gitignore

		echo ".DS_Store\n.sass-cache/\n_resources/\n.obi" > .gitignore

		#load the database local credentials
		host="$localhost" ; user="$localuser" ; pass="$localpassword" ; name="$PROJ_FOLDER_NAME"_local_wp
		# Create project's database
		$mysql -u"$user" -h"$host" -p"$pass" -Bse "CREATE DATABASE ${name};"

		git add .
		git commit -am "initial commit"

		# List directory contents and their location
		ls -laO
		echo ; echo "obi: Your project is located at" `pwd` ; echo
	;;
	-b )
		does_config_exist
		empty_string_check "$PROJ_FOLDER_NAME"
		strcheckret=$?
		directory_exist_check "$PROJ"
		dircheckret=$?
		check_returns
		create_project_config
		zip_to_s3

		case $3 in
			-l )
				clear
				mysql_dump local
			;;
			-s )
				clear
				mysql_dump staging
			;;
			-p )
				clear
				mysql_dump production
			;;
		    -lts )
				clear
				mysql_sync local staging local_site_url staging_site_url
		    ;;
		    -ltp )
				clear
				mysql_sync local production local_site_url production_site_url
		    ;;
		    -stl )
				clear
				mysql_sync staging local staging_site_url local_site_url
		    ;;
		    -stp )
				clear
				mysql_sync staging production staging_site_url production_site_url
		    ;;
		    -ptl )
				clear
				mysql_sync production local production_site_url local_site_url
		    ;;
		    -pts )
				clear
				mysql_sync production staging production_site_url staging_site_url
		    ;;
		    *)
				clear
				echo
				echo "obi: Please specify database sync order"
				echo
				echo "obi: Usage: obi [-b] [project_name] [location]"
				echo
				exit 0
				;;
			esac
		;;
	-i )
		does_config_exist
		empty_string_check "$PROJ_FOLDER_NAME"
		strcheckret=$?
		directory_exist_check "$PROJ"
		dircheckret=$?
		check_returns
		create_project_config

		case $3 in
			-l )
				sql_path=$4
				clear
				mysql_dump local
				mysql_import local "$sql_path"
			;;
			-s )
				sql_path=$4
				clear
				mysql_dump staging
				mysql_import staging "$sql_path"
			;;
			-p )
				sql_path=$4
				clear
				mysql_dump production
				mysql_import production "$sql_path"
			;;
		    -lts )
				clear
				mysql_sed_import local staging local_site_url staging_site_url
			;;
		    -ltp )
				clear
				mysql_sed_import local production local_site_url production_site_url
			;;
		    -stl )
				clear
				mysql_sed_import staging local staging_site_url local_site_url
			;;
		    -stp )
				clear
				mysql_sed_import staging production staging_site_url production_site_url
			;;
		    -ptl )
				clear
				mysql_sed_import production local production_site_url local_site_url
			;;
		    -pts )
				clear
				mysql_sed_import production staging production_site_url staging_site_url
			;;
		    *)
				clear
				echo
				echo "obi: Please specify database sync order"
				echo
				echo "obi: Usage: obi [-b] [project_name] [location]"
				echo
				exit 0
				;;
			esac
		;;
	-r )
		does_config_exist
		empty_string_check "$PROJ_FOLDER_NAME"
		strcheckret=$?
		directory_exist_check "$PROJ"
		dircheckret=$?
		check_returns
		create_project_config

		case $3 in
		    -lts )
				clear
				does_project_config_exist $staging_ssh

				rsync_dir "$PROJ$4" "$staging_ssh:$staging_remote_project_root$4"
			;;
		    -ltp )

				clear
				does_project_config_exist $production_ssh

				rsync_dir "$PROJ$4" "$production_ssh:$production_remote_project_root$4"
			;;
		    -stl )
				clear
				does_project_config_exist $staging_ssh

				rsync_dir "$staging_ssh:$staging_remote_project_root$4" "$PROJ$4"
			;;
		    -stp )
				clear
				does_project_config_exist $staging_ssh
				does_project_config_exist $production_ssh

				rsync_dir "$staging_ssh:$staging_remote_project_root$4" "$production_ssh:$production_remote_project_root$4"
			;;
		    -ptl )

				clear
				does_project_config_exist $production_ssh

				rsync_dir "$production_ssh:$production_remote_project_root$4" "$PROJ$4"
			;;
		    -pts )
				clear
				does_project_config_exist $production_ssh
				does_project_config_exist $staging_ssh

				rsync_dir "$production_ssh:$production_remote_project_root$4" "$staging_ssh:$staging_remote_project_root$4"
			;;
		    *)
				clear
				echo
				echo "obi: Please specify database sync order"
				echo
				echo "obi: Usage: obi [-b] [project_name] [location]"
				echo
				exit 0
				;;
			esac
		;;
	mysql )
		does_config_exist
		empty_string_check "$2"
		strcheckret=$?
		check_returns

		case $2 in
			-l ) user="$localuser" ; host="$localhost" ; pass="$localpassword"
			;;
			-s ) user="$staginguser" ; host="$staginghost" ; pass="$stagingpassword"
			;;
			-p ) user="$productionuser" ; host="$productionhost" ; pass="$productionpassword"
			;;
		esac
		$mysql -u"$user" -h"$host" -p"$pass"
		;;
	update )
		clear
			obi_update
		exit
	;;
	init )
		obi_init

		# List directory contents and their location
		ls -laO
		echo ; echo "obi: Your project is located at" `pwd` ; echo
	;;
	kill )
		does_config_exist
		empty_string_check "$PROJ_FOLDER_NAME"
		strcheckret=$?
		directory_exist_check "$PROJ"
		dircheckret=$?
		check_returns

		mysql_dump local ; cp -r "$PROJ" ~/.Trash ; rm -rf "$PROJ" ; $mysql -u"$user" -h"$host" -p"$pass" -Bse "DROP database $name"

		;;
	help )
		clear
		help

		exit
	;;
	* )
		clear
		does_config_exist
		echo ; echo "obi: Please enter a valid selection or run \033[33mobi help\033[0m" ; echo
	;;
esac
